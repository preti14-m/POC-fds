
name: Deploy Sample .NET Core to Azure VM

env:
  DOTNET_VERSION: '6.0.x'
  PROJECT_PATH: 'SampleDotNetApp/SampleDotNetApp/SampleDotNetApp.csproj'
  SOLUTION_PATH: 'SampleDotNetApp/SampleDotNetApp.sln'
  TARGET_RID: 'linux-x64'
  APPLICATION_SERVICE_NAME: 'sample-dotnet-app'
  APPLICATION_DEPLOY_PATH: '/opt/sample-dotnet-app'

on:
  push:
    branches:
      - main

permissions:
  contents: read
  actions: read

jobs:
  build-test-publish:
    name: Build and Publish .NET App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore .NET Dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Build .NET Application
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

      - name: Publish .NET Application
        run: |
          dotnet publish ${{ env.PROJECT_PATH }}             --configuration Release             --runtime ${{ env.TARGET_RID }}             --self-contained true             --output ./publish_output

      - name: Upload Published Application Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-app-publish
          path: ./publish_output
          retention-days: 1

  deploy-to-vm:
    name: Deploy to Azure VM
    runs-on: ubuntu-latest
    needs: build-test-publish

    steps:
      - name: Download Published Application Artifact
        uses: actions/download-artifact@v4
        with:
          name: dotnet-app-publish
          path: ./downloaded_app

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy via SSH and SCP
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            sudo systemctl stop ${{ env.APPLICATION_SERVICE_NAME }} || true
            sudo rm -rf ${{ env.APPLICATION_DEPLOY_PATH }}/*
            sudo mkdir -p ${{ env.APPLICATION_DEPLOY_PATH }}
          EOF

          scp -r -o StrictHostKeyChecking=no ./downloaded_app/* ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:${{ env.APPLICATION_DEPLOY_PATH }}/

          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            sudo systemctl start ${{ env.APPLICATION_SERVICE_NAME }}
            sudo systemctl status ${{ env.APPLICATION_SERVICE_NAME }} --no-pager
          EOF
